"""
Google Images API Search Engine
S·ª≠ d·ª•ng Google Custom Search API ƒë·ªÉ t√¨m ·∫£nh ch·∫•t l∆∞·ª£ng cao
"""
import os
import requests
import time
import random
import logging
from dotenv import load_dotenv

class GoogleImagesAPI:
    def __init__(self):
        load_dotenv()

        # Google Custom Search API credentials
        self.api_key = os.getenv("GOOGLE_API_KEY", "").strip() or None
        # Cho ph√©p override ri√™ng cho Google Images n·∫øu c·∫ßn
        self.search_engine_id = (
            os.getenv("GOOGLE_IMAGE_CSE_ID", "").strip()
            or os.getenv("GOOGLE_CSE_ID", "").strip()
            or None
        )
        self.base_url = "https://www.googleapis.com/customsearch/v1"

        if not self.api_key or not self.search_engine_id:
            logging.warning(
                "‚ö†Ô∏è  GOOGLE_API_KEY ho·∫∑c GOOGLE_IMAGE_CSE_ID/GOOGLE_CSE_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Google Images API s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
            )
        
        # Vietnamese to English translation for better search results
        self.translation_map = {
            'xo√†i': 'mango fruit',
            'c√† chua': 'tomato',
            'l√∫a': 'rice plant',
            'ng√¥': 'corn maize',
            'm√≠a': 'sugarcane',
            'l√∫a m√¨': 'wheat',
            't√°o': 'apple fruit',
            'c√† r√≥t': 'eggplant',
            'khoai t√¢y': 'potato',
            'khoai lang': 'sweet potato',
            'c√† r·ªët': 'carrot',
            'b·∫Øp c·∫£i': 'cabbage',
            'rau mu·ªëng': 'water spinach',
            'd∆∞a chu·ªôt': 'cucumber',
            '·ªõt': 'chili pepper',
            'h√†nh t√¢y': 'onion',
            't·ªèi': 'garlic',
            'cam': 'orange fruit',
            'chanh': 'lemon',
            'chu·ªëi': 'banana',
            'd·ª´a': 'coconut',
            'ƒëu ƒë·ªß': 'papaya',
            'nho': 'grape',
            'd√¢u t√¢y': 'strawberry',
            'g√†': 'chicken poultry',
            'b√≤': 'cattle cow',
            'heo': 'pig swine',
            'c·ª´u': 'sheep',
            'd√™': 'goat',
            'v·ªãt': 'duck',
            'c√°': 'fish aquaculture',
            't√¥m': 'shrimp',
            'm√°y k√©o': 'tractor farm',
            'm√°y g·∫∑t': 'harvester',
            'm√°y c√†y': 'plow',
            'hoa h∆∞·ªõng d∆∞∆°ng': 'sunflower',
            'hoa h·ªìng': 'rose flower',
            'hoa sen': 'lotus flower',
            'ƒë·∫•t': 'agricultural soil',
            'ph√¢n b√≥n': 'fertilizer',
            'n∆∞·ªõc t∆∞·ªõi': 'irrigation',
            'nh√† k√≠nh': 'greenhouse',
            'h·∫°t gi·ªëng': 'seeds',
            'c√¢y gi·ªëng': 'seedlings',
            's√¢u h·∫°i': 'crop pests',
            'thu·ªëc tr·ª´ s√¢u': 'pesticide',
            'b·ªánh c√¢y tr·ªìng': 'plant disease',
            'n√¥ng nghi·ªáp': 'agriculture farming'
        }
    
    def search_images(self, query, max_results=4):
        """
        T√¨m ·∫£nh t·ª´ Google Images v·ªõi quality check
        """
        print(f"üîç Google Images search for: {query}")
        
        # Translate Vietnamese to English for better results
        english_query = self.translate_query(query)
        print(f"üåê Translated query: {english_query}")
        
        images = []
        
        try:
            # Search with main query
            results = self._search_google(english_query, max_results)
            images.extend(results)
            
            # If not enough results, try with additional terms
            if len(images) < max_results:
                additional_query = f"{english_query} agriculture farming"
                additional_results = self._search_google(additional_query, max_results - len(images))
                images.extend(additional_results)
            
            # Filter and validate images
            valid_images = []
            for img in images:
                if self.validate_image_url(img['url']):
                    valid_images.append(img)
                    if len(valid_images) >= max_results:
                        break
            
            print(f"‚úÖ Found {len(valid_images)} valid images")
            return valid_images
            
        except Exception as e:
            print(f"‚ùå Google Images API error: {e}")
            return self.create_fallback_images(query, max_results)
    
    def translate_query(self, query):
        """D·ªãch t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh"""
        query_lower = query.lower().strip()
        
        # Exact match first
        if query_lower in self.translation_map:
            return self.translation_map[query_lower]
        
        # Partial match
        for vn_term, en_term in self.translation_map.items():
            if vn_term in query_lower:
                return en_term
        
        # If no translation found, return original + agriculture
        return f"{query} agriculture"
    
    def _search_google(self, query, num_results):
        """G·ªçi Google Custom Search API"""
        if not self.api_key or not self.search_engine_id:
            logging.warning("‚ö†Ô∏è  Thi·∫øu GOOGLE_API_KEY ho·∫∑c GOOGLE_IMAGE_CSE_ID/GOOGLE_CSE_ID. B·ªè qua Google Custom Search.")
            return []

        params = {
            'key': self.api_key,
            'cx': self.search_engine_id,
            'q': query,
            'searchType': 'image',
            'num': min(num_results, 10),  # Google API max 10 per request
            'safe': 'active',
            'imgSize': 'medium',
            'imgType': 'photo',
            'rights': 'cc_publicdomain,cc_attribute,cc_sharealike,cc_noncommercial'
        }
        
        response = requests.get(self.base_url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        images = []
        
        if 'items' in data:
            for i, item in enumerate(data['items']):
                img_data = {
                    'url': item['link'],
                    'title': item.get('title', f'Google Image {i+1}'),
                    'description': item.get('snippet', 'High quality image from Google'),
                    'photographer': item.get('displayLink', 'Google Images'),
                    'source': 'google_images'
                }
                images.append(img_data)
        
        return images
    
    def validate_image_url(self, url):
        """Ki·ªÉm tra URL ·∫£nh c√≥ h·ª£p l·ªá kh√¥ng"""
        try:
            # Quick HEAD request to check if URL is accessible
            response = requests.head(url, timeout=5, allow_redirects=True)
            
            # Check if response is successful and content is image
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '').lower()
                if any(img_type in content_type for img_type in ['image/', 'jpeg', 'jpg', 'png', 'gif', 'webp']):
                    return True
            
            print(f"‚ùå Invalid image URL: {url} (status: {response.status_code})")
            return False
            
        except Exception as e:
            print(f"‚ùå URL validation error for {url}: {e}")
            return False
    
    def create_fallback_images(self, query, count):
        """T·∫°o ·∫£nh fallback ch·∫•t l∆∞·ª£ng cao khi API th·∫•t b·∫°i"""
        print(f"üîÑ Creating {count} fallback images for: {query}")
        
        fallback_images = []
        colors = ['4CAF50', 'FF9800', '2196F3', 'E91E63', '9C27B0', 'FF5722']
        
        for i in range(count):
            color = colors[i % len(colors)]
            fallback_url = f"https://via.placeholder.com/400x300/{color}/FFFFFF?text={query.replace(' ', '+')}+{i+1}"
            
            fallback_images.append({
                'url': fallback_url,
                'title': f'{query.title()} - ·∫¢nh {i+1}',
                'description': f'·∫¢nh minh h·ªça ch·∫•t l∆∞·ª£ng cao cho {query}',
                'photographer': 'AgriSense AI',
                'source': 'fallback'
            })
        
        return fallback_images

# Test function
def test_google_images():
    """Test Google Images API"""
    print("üöÄ TEST GOOGLE IMAGES API")
    print("=" * 50)
    
    api = GoogleImagesAPI()
    
    test_queries = ['xo√†i', 'c√† chua', 'l√∫a', 'n√¥ng nghi·ªáp']
    
    for query in test_queries:
        print(f"\nüîç Testing: {query}")
        print("-" * 30)
        
        images = api.search_images(query, 2)
        
        for i, img in enumerate(images):
            print(f"üì∏ {i+1}. {img['title']}")
            print(f"   URL: {img['url'][:60]}...")
            print(f"   Source: {img['source']}")

if __name__ == "__main__":
    test_google_images()