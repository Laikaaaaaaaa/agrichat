"""
data_analyzer.py - AI Data Analysis Module for AgriSense
Ph√¢n t√≠ch c√¢u h·ªèi v√† t·∫°o d·ªØ li·ªáu th√¥ng minh cho bi·ªÉu ƒë·ªì
"""
import re
import json
import random
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Dict, List, Optional, Any
import google.generativeai as genai

@dataclass
class ChartData:
    """C·∫•u tr√∫c d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì"""
    chart_type: str  # 'bar', 'line', 'pie', 'doughnut', 'mixed'
    title: str
    subtitle: str
    labels: List[str]
    datasets: List[Dict[str, Any]]
    metrics: List[Dict[str, Any]]  # C√°c ch·ªâ s·ªë b·ªï sung
    expert_data: Optional[Dict[str, Any]] = None

@dataclass
class AnalysisResult:
    """K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi"""
    category: str  # livestock, crops, weather, economics, etc.
    subcategory: str  # heo, g√†, l√∫a, ng√¥, etc.
    chart_configs: List[ChartData]
    confidence: float  # ƒê·ªô tin c·∫≠y c·ªßa ph√¢n t√≠ch (0-1)
    keywords: List[str]
    time_period: Optional[str] = None  # '2024', 'last_year', 'monthly', etc.

class AgriDataAnalyzer:
    def __init__(self, gemini_api_key: str = None):
        """Kh·ªüi t·∫°o AI Data Analyzer"""
        self.gemini_api_key = gemini_api_key
        if gemini_api_key:
            genai.configure(api_key=gemini_api_key)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Database m·∫´u - trong th·ª±c t·∫ø s·∫Ω k·∫øt n·ªëi database th·∫≠t
        self.data_sources = {
            'livestock': self._load_livestock_data(),      # Gia s√∫c - 4 ch√¢n
            'poultry': self._load_poultry_data(),         # Gia c·∫ßm - 2 ch√¢n
            'animal_husbandry': self._load_livestock_data(),  # ChƒÉn nu√¥i t·ªïng h·ª£p
            'crops': self._load_crops_data(),
            'economics': self._load_economics_data(),
            'weather': self._load_weather_data(),
            'fertilizer': self._load_fertilizer_data(),
            'irrigation': self._load_irrigation_data()
        }
        
        # Patterns ƒë·ªÉ ph√¢n t√≠ch c√¢u h·ªèi
        self.analysis_patterns = self._load_analysis_patterns()
    
    def analyze_question(self, question: str, use_ai: bool = True) -> AnalysisResult:
        """
        Ph√¢n t√≠ch c√¢u h·ªèi v√† tr·∫£ v·ªÅ c·∫•u h√¨nh d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        """
        print(f"üîç Analyzing question: {question}")
        
        # B∆∞·ªõc 1: Ph√¢n t√≠ch c∆° b·∫£n v·ªõi patterns
        basic_analysis = self._basic_pattern_analysis(question)
        
        # B∆∞·ªõc 2: S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch s√¢u h∆°n (n·∫øu c√≥)
        if use_ai and self.gemini_api_key:
            ai_analysis = self._ai_enhanced_analysis(question, basic_analysis)
            analysis = ai_analysis
        else:
            analysis = basic_analysis
        
        # B∆∞·ªõc 3: T·∫°o c·∫•u h√¨nh bi·ªÉu ƒë·ªì d·ª±a tr√™n ph√¢n t√≠ch
        chart_configs = self._generate_chart_configs(analysis, question)
        
        return AnalysisResult(
            category=analysis['category'],
            subcategory=analysis['subcategory'],
            chart_configs=chart_configs,
            confidence=analysis['confidence'],
            keywords=analysis['keywords'],
            time_period=analysis.get('time_period')
        )
    
    def _basic_pattern_analysis(self, question: str) -> Dict[str, Any]:
        """Ph√¢n t√≠ch c∆° b·∫£n b·∫±ng patterns"""
        question_lower = question.lower()
        
        analysis = {
            'category': 'general',
            'subcategory': 'overview',
            'keywords': [],
            'confidence': 0.5,
            'data_types': [],
            'time_period': None
        }
        
        # Ph√¢n t√≠ch category ch√≠nh
        for category, patterns in self.analysis_patterns.items():
            score = 0
            matched_keywords = []
            
            for pattern in patterns['keywords']:
                if pattern in question_lower:
                    score += patterns['weights'].get(pattern, 1)
                    matched_keywords.append(pattern)
            
            if score > 0:
                analysis['category'] = category
                analysis['keywords'].extend(matched_keywords)
                analysis['confidence'] = min(score / 10, 1.0)
                
                # T√¨m subcategory
                for subcat, sub_patterns in patterns['subcategories'].items():
                    if any(sp in question_lower for sp in sub_patterns):
                        analysis['subcategory'] = subcat
                        analysis['confidence'] += 0.2
                        break
                
                break
        
        # Ph√¢n t√≠ch lo·∫°i d·ªØ li·ªáu c·∫ßn thi·∫øt
        data_type_patterns = {
            'price': ['gi√°', 'chi ph√≠', 'cost', 'price', 'th·ªã tr∆∞·ªùng'],
            'quantity': ['s·ªë l∆∞·ª£ng', 'ƒë√†n', 'di·ªán t√≠ch', 's·∫£n l∆∞·ª£ng', 'population'],
            'trend': ['xu h∆∞·ªõng', 'bi·∫øn ƒë·ªông', 'thay ƒë·ªïi', 'trend', 'tƒÉng', 'gi·∫£m'],
            'comparison': ['so s√°nh', 'compare', 'kh√°c nhau', 'difference'],
            'distribution': ['ph√¢n b·ªë', 'distribution', 'v√πng', 'khu v·ª±c', 'region'],
            'performance': ['hi·ªáu su·∫•t', 'nƒÉng su·∫•t', 'performance', 'productivity']
        }
        
        for data_type, patterns in data_type_patterns.items():
            if any(pattern in question_lower for pattern in patterns):
                analysis['data_types'].append(data_type)
        
        # Ph√¢n t√≠ch time period
        time_patterns = {
            'monthly': ['th√°ng', 'month', 'h√†ng th√°ng'],
            'yearly': ['nƒÉm', 'year', 'h√†ng nƒÉm'],
            'quarterly': ['qu√Ω', 'quarter'],
            'current': ['hi·ªán t·∫°i', 'current', 'b√¢y gi·ªù'],
            'forecast': ['d·ª± b√°o', 'forecast', 't∆∞∆°ng lai']
        }
        
        for period, patterns in time_patterns.items():
            if any(pattern in question_lower for pattern in patterns):
                analysis['time_period'] = period
                break
        
        return analysis
    
    def _ai_enhanced_analysis(self, question: str, basic_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch s√¢u h∆°n"""
        try:
            ai_prompt = f"""
Ph√¢n t√≠ch c√¢u h·ªèi n√¥ng nghi·ªáp sau v√† tr·∫£ v·ªÅ JSON:

C√¢u h·ªèi: "{question}"

Ph√¢n t√≠ch c∆° b·∫£n ƒë√£ c√≥: {json.dumps(basic_analysis, ensure_ascii=False)}

H√£y c·∫£i thi·ªán ph√¢n t√≠ch n√†y v√† tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
{{
    "category": "livestock/crops/economics/weather/fertilizer/irrigation",
    "subcategory": "heo/g√†/b√≤/l√∫a/ng√¥/etc",
    "keywords": ["t·ª´ kh√≥a ch√≠nh"],
    "confidence": 0.8,
    "data_types": ["price", "quantity", "trend", "comparison", "distribution", "performance"],
    "time_period": "monthly/yearly/current/forecast",
    "specific_focus": "ƒëi·ªÅu g√¨ c·∫ßn focus ch√≠nh",
    "chart_suggestions": ["bar", "line", "pie", "mixed"],
    "data_requirements": {{
        "main_metric": "ch·ªâ s·ªë ch√≠nh c·∫ßn hi·ªÉn th·ªã",
        "supporting_metrics": ["ch·ªâ s·ªë ph·ª•"],
        "geographical_scope": "to√†n qu·ªëc/v√πng mi·ªÅn/t·ªânh th√†nh",
        "time_scope": "1 nƒÉm/6 th√°ng/etc"
    }}
}}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.
"""
            
            response = self.model.generate_content(ai_prompt)
            ai_result = json.loads(response.text.strip())
            
            # Merge v·ªõi basic analysis
            enhanced_analysis = basic_analysis.copy()
            enhanced_analysis.update(ai_result)
            enhanced_analysis['confidence'] = min(enhanced_analysis['confidence'] + 0.3, 1.0)
            
            print(f"‚úÖ AI enhanced analysis: {enhanced_analysis['category']}/{enhanced_analysis['subcategory']}")
            return enhanced_analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è AI analysis failed: {e}, using basic analysis")
            return basic_analysis
    
    def _generate_chart_configs(self, analysis: Dict[str, Any], question: str) -> List[ChartData]:
        """T·∫°o c·∫•u h√¨nh bi·ªÉu ƒë·ªì d·ª±a tr√™n ph√¢n t√≠ch"""
        category = analysis['category']
        subcategory = analysis['subcategory']
        data_types = analysis.get('data_types', [])
        
        print(f"üìä Generating charts for {category}/{subcategory} with data types: {data_types}")
        
        chart_configs = []
        
        # L·∫•y d·ªØ li·ªáu t·ª´ data source
        category_data = self.data_sources.get(category, {})
        specific_data = category_data.get(subcategory, category_data.get('default', {}))
        
        # T·∫°o bi·ªÉu ƒë·ªì ch√≠nh
        main_chart = self._create_main_chart(analysis, specific_data, question)
        if main_chart:
            chart_configs.append(main_chart)
        
        # T·∫°o bi·ªÉu ƒë·ªì b·ªï sung d·ª±a tr√™n data_types
        for data_type in data_types:
            additional_chart = self._create_additional_chart(data_type, analysis, specific_data)
            if additional_chart:
                chart_configs.append(additional_chart)
        
        # N·∫øu kh√¥ng c√≥ bi·ªÉu ƒë·ªì n√†o, t·∫°o bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh
        if not chart_configs:
            default_chart = self._create_default_chart(analysis, specific_data)
            chart_configs.append(default_chart)
        
        print(f"‚úÖ Generated {len(chart_configs)} chart configurations")
        return chart_configs
    
    def _create_main_chart(self, analysis: Dict[str, Any], data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì ch√≠nh"""
        category = analysis['category']
        subcategory = analysis['subcategory']
        
        if category == 'livestock':  # Gia s√∫c - 4 ch√¢n
            return self._create_livestock_main_chart(subcategory, data, question)
        elif category == 'poultry':  # Gia c·∫ßm - 2 ch√¢n
            return self._create_poultry_main_chart(subcategory, data, question)
        elif category == 'animal_husbandry':  # ChƒÉn nu√¥i t·ªïng h·ª£p
            return self._create_animal_husbandry_chart(subcategory, data, question)
        elif category == 'crops':
            return self._create_crops_main_chart(subcategory, data, question)
        elif category == 'economics':
            return self._create_economics_main_chart(subcategory, data, question)
        else:
            return self._create_general_main_chart(analysis, data, question)
    
    def _create_livestock_main_chart(self, subcategory: str, data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì ch√≠nh cho chƒÉn nu√¥i"""
        
        # N·∫øu l√† c√¢u h·ªèi t·ªïng quan v·ªÅ gia s√∫c, t·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë c√°c lo√†i gia s√∫c
        if subcategory == 'overview' or 't·ª∑ l·ªá' in question.lower() or 'ph√¢n b·ªë' in question.lower():
            chart_type = 'doughnut'
            title = "T·ª∑ l·ªá gia s√∫c t·∫°i Vi·ªát Nam"
            labels = ['Heo', 'B√≤', 'Tr√¢u', 'D√™', 'C·ª´u']
            # D·ªØ li·ªáu th·ª±c t·∫ø v·ªÅ ƒë√†n gia s√∫c Vi·ªát Nam (tri·ªáu con)
            values = [26.8, 5.2, 2.8, 1.5, 0.8]
            return ChartData(
                chart_type=chart_type,
                title=title,
                subtitle="Ph√¢n b·ªë ƒë√†n gia s√∫c theo lo√†i (tri·ªáu con)",
                labels=labels,
                datasets=[{
                    'label': 'S·ªë l∆∞·ª£ng (tri·ªáu con)',
                    'data': values,
                    'backgroundColor': ['#8b5cf6', '#10b981', '#3b82f6', '#f59e0b', '#ef4444'],
                    'borderColor': '#ffffff',
                    'borderWidth': 2
                }],
                metrics=[
                    {'label': 'T·ªïng ƒë√†n gia s√∫c', 'value': '36.1 tri·ªáu con', 'change': '+2.1%', 'trend': 'positive'},
                    {'label': 'Gia s√∫c ch·ªß l·ª±c', 'value': 'Heo (74.2%)', 'change': '·ªîn ƒë·ªãnh', 'trend': 'neutral'},
                    {'label': 'TƒÉng tr∆∞·ªüng ng√†nh', 'value': '3.5%/nƒÉm', 'change': '+0.8%', 'trend': 'positive'}
                ]
            )
        
        # X√°c ƒë·ªãnh lo·∫°i bi·ªÉu ƒë·ªì ph√π h·ª£p cho t·ª´ng lo√†i c·ª• th·ªÉ
        if 'gi√°' in question.lower() or 'price' in question.lower():
            chart_type = 'line'
            title = f"Bi·∫øn ƒë·ªông gi√° {subcategory} 12 th√°ng"
            labels = [f"T{i}" for i in range(1, 13)]
            base_price = data.get('current_price', 50000)
            values = [base_price + random.randint(-5000, 5000) for _ in range(12)]
        elif 's·ªë l∆∞·ª£ng' in question.lower() or 'ƒë√†n' in question.lower():
            chart_type = 'bar'
            title = f"ƒê√†n {subcategory} theo v√πng mi·ªÅn"
            labels = ['ƒêBSCL', 'ƒêB B·∫Øc B·ªô', 'Duy√™n h·∫£i Nam TB', 'T√¢y Nguy√™n', 'B·∫Øc TB', 'Kh√°c']
            total = data.get('total_population', 100)
            values = self._distribute_values(total, len(labels))
        else:
            chart_type = 'doughnut'
            title = f"C∆° c·∫•u {subcategory} theo lo·∫°i"
            labels = data.get('types', ['Lo·∫°i 1', 'Lo·∫°i 2', 'Lo·∫°i 3'])
            values = self._distribute_values(100, len(labels))
        
        return ChartData(
            chart_type=chart_type,
            title=title,
            subtitle=f"D·ªØ li·ªáu {subcategory} nƒÉm 2024",
            labels=labels,
            datasets=[{
                'label': title,
                'data': values,
                'backgroundColor': self._generate_colors(len(labels)),
                'borderColor': '#ffffff',
                'borderWidth': 2
            }],
            metrics=self._generate_livestock_metrics(subcategory, data)
        )
    
    def _create_additional_chart(self, data_type: str, analysis: Dict[str, Any], data: Dict[str, Any]) -> Optional[ChartData]:
        """T·∫°o bi·ªÉu ƒë·ªì b·ªï sung d·ª±a tr√™n lo·∫°i d·ªØ li·ªáu"""
        category = analysis['category']
        subcategory = analysis['subcategory']
        
        if data_type == 'trend':
            return ChartData(
                chart_type='line',
                title=f"Xu h∆∞·ªõng {subcategory} theo th·ªùi gian",
                subtitle="D·ªØ li·ªáu 12 th√°ng qua",
                labels=[f"T{i}" for i in range(1, 13)],
                datasets=[{
                    'label': f'Xu h∆∞·ªõng {subcategory}',
                    'data': self._generate_trend_data(),
                    'borderColor': '#10b981',
                    'backgroundColor': 'rgba(16, 185, 129, 0.1)',
                    'fill': True,
                    'tension': 0.4
                }],
                metrics=[]
            )
        
        elif data_type == 'comparison':
            return ChartData(
                chart_type='bar',
                title=f"So s√°nh {subcategory} v·ªõi nƒÉm tr∆∞·ªõc",
                subtitle="T·ª∑ l·ªá thay ƒë·ªïi (%)",
                labels=['Q1', 'Q2', 'Q3', 'Q4'],
                datasets=[
                    {
                        'label': '2023',
                        'data': self._generate_comparison_data('2023'),
                        'backgroundColor': '#94a3b8'
                    },
                    {
                        'label': '2024',
                        'data': self._generate_comparison_data('2024'),
                        'backgroundColor': '#10b981'
                    }
                ],
                metrics=[]
            )
        
        elif data_type == 'performance':
            return ChartData(
                chart_type='mixed',
                title=f"Hi·ªáu su·∫•t {subcategory}",
                subtitle="C√°c ch·ªâ s·ªë hi·ªáu su·∫•t ch√≠nh",
                labels=['Q1', 'Q2', 'Q3', 'Q4'],
                datasets=[
                    {
                        'type': 'line',
                        'label': 'Hi·ªáu su·∫•t (%)',
                        'data': [85, 88, 92, 89],
                        'borderColor': '#3b82f6',
                        'yAxisID': 'y'
                    },
                    {
                        'type': 'bar',
                        'label': 'S·∫£n l∆∞·ª£ng',
                        'data': [100, 110, 115, 108],
                        'backgroundColor': '#10b981',
                        'yAxisID': 'y1'
                    }
                ],
                metrics=[]
            )
        
        return None
    
    def _generate_livestock_metrics(self, subcategory: str, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """T·∫°o metrics cho chƒÉn nu√¥i"""
        metrics = [
            {
                'label': f'T·ªïng ƒë√†n {subcategory}',
                'value': f"{data.get('total_population', 100)}M con",
                'change': '+2.3%',
                'trend': 'positive'
            },
            {
                'label': f'Gi√° {subcategory} hi·ªán t·∫°i',
                'value': f"{data.get('current_price', 50000):,} VNƒê/kg",
                'change': '+1.5%',
                'trend': 'positive'
            },
            {
                'label': 'TƒÉng tr·ªçng TB',
                'value': f"{data.get('growth_rate', 750)}g/ng√†y",
                'change': '+3.1%',
                'trend': 'positive'
            }
        ]
        return metrics
    
    def _distribute_values(self, total: float, count: int) -> List[float]:
        """Ph√¢n b·ªë gi√° tr·ªã ng·∫´u nhi√™n c√≥ t·ªïng = total"""
        if count == 0:
            return []
        
        # T·∫°o t·ª∑ l·ªá ng·∫´u nhi√™n
        ratios = [random.uniform(0.5, 2.0) for _ in range(count)]
        ratio_sum = sum(ratios)
        
        # Chu·∫©n h√≥a ƒë·ªÉ t·ªïng = total
        values = [(ratio / ratio_sum) * total for ratio in ratios]
        
        # L√†m tr√≤n v√† ƒëi·ªÅu ch·ªânh
        values = [round(v, 1) for v in values]
        
        return values
    
    def _generate_colors(self, count: int) -> List[str]:
        """T·∫°o m√†u s·∫Øc cho bi·ªÉu ƒë·ªì"""
        base_colors = [
            '#10b981', '#3b82f6', '#f59e0b', '#ef4444', 
            '#8b5cf6', '#6b7280', '#14b8a6', '#f97316'
        ]
        
        colors = []
        for i in range(count):
            colors.append(base_colors[i % len(base_colors)])
        
        return colors
    
    def _generate_trend_data(self) -> List[float]:
        """T·∫°o d·ªØ li·ªáu xu h∆∞·ªõng"""
        base = 100
        data = [base]
        
        for i in range(11):
            change = random.uniform(-5, 8)  # Xu h∆∞·ªõng tƒÉng nh·∫π
            base += change
            data.append(round(base, 1))
        
        return data
    
    def _generate_comparison_data(self, year: str) -> List[float]:
        """T·∫°o d·ªØ li·ªáu so s√°nh"""
        if year == '2024':
            return [105, 112, 118, 115]  # TƒÉng so v·ªõi 2023
        else:
            return [100, 103, 108, 106]  # Baseline 2023
    
    def _create_default_chart(self, analysis: Dict[str, Any], data: Dict[str, Any]) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh"""
        return ChartData(
            chart_type='bar',
            title=f"T·ªïng quan {analysis['subcategory']}",
            subtitle="D·ªØ li·ªáu t·ªïng h·ª£p",
            labels=['Hi·ªán t·∫°i', 'M·ª•c ti√™u', 'Trung b√¨nh ng√†nh'],
            datasets=[{
                'label': 'Gi√° tr·ªã',
                'data': [85, 100, 90],
                'backgroundColor': ['#10b981', '#3b82f6', '#f59e0b']
            }],
            metrics=[
                {'label': 'Tr·∫°ng th√°i', 'value': 'T·ªët', 'change': '+5%', 'trend': 'positive'}
            ]
        )
    
    def _create_poultry_main_chart(self, subcategory: str, data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì ch√≠nh cho gia c·∫ßm (2 ch√¢n, c√≥ c√°nh)"""
        
        # N·∫øu l√† c√¢u h·ªèi t·ªïng quan v·ªÅ gia c·∫ßm, t·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë c√°c lo√†i gia c·∫ßm
        if subcategory == 'overview' or 't·ª∑ l·ªá' in question.lower() or 'ph√¢n b·ªë' in question.lower():
            chart_type = 'doughnut'
            title = "T·ª∑ l·ªá gia c·∫ßm t·∫°i Vi·ªát Nam"
            labels = ['G√†', 'V·ªãt', 'Ngan', 'Ng·ªóng', 'Chim c√∫t']
            # D·ªØ li·ªáu th·ª±c t·∫ø v·ªÅ ƒë√†n gia c·∫ßm Vi·ªát Nam (tri·ªáu con)
            values = [347, 82, 15, 8, 25]
            return ChartData(
                chart_type=chart_type,
                title=title,
                subtitle="Ph√¢n b·ªë ƒë√†n gia c·∫ßm theo lo√†i (tri·ªáu con)",
                labels=labels,
                datasets=[{
                    'label': 'S·ªë l∆∞·ª£ng (tri·ªáu con)',
                    'data': values,
                    'backgroundColor': ['#10b981', '#3b82f6', '#f59e0b', '#ef4444', '#8b5cf6'],
                    'borderColor': '#ffffff',
                    'borderWidth': 2
                }],
                metrics=[
                    {'label': 'T·ªïng ƒë√†n gia c·∫ßm', 'value': '477 tri·ªáu con', 'change': '+3.5%', 'trend': 'positive'},
                    {'label': 'Gia c·∫ßm ch·ªß l·ª±c', 'value': 'G√† (72.7%)', 'change': '+2.1%', 'trend': 'positive'},
                    {'label': 'S·∫£n l∆∞·ª£ng tr·ª©ng', 'value': '16.8 t·ª∑ qu·∫£', 'change': '+4.2%', 'trend': 'positive'}
                ]
            )
        
        # X√°c ƒë·ªãnh lo·∫°i bi·ªÉu ƒë·ªì ph√π h·ª£p cho t·ª´ng lo√†i c·ª• th·ªÉ
        if 'gi√°' in question.lower() or 'price' in question.lower():
            chart_type = 'line'
            title = f"Bi·∫øn ƒë·ªông gi√° {subcategory} 12 th√°ng"
            labels = [f"T{i}" for i in range(1, 13)]
            base_price = data.get('current_price', 45000)
            values = [base_price + random.randint(-3000, 3000) for _ in range(12)]
        elif 's·ªë l∆∞·ª£ng' in question.lower() or 'ƒë√†n' in question.lower():
            chart_type = 'bar'
            title = f"ƒê√†n {subcategory} theo v√πng mi·ªÅn"
            labels = ['ƒêBSCL', 'ƒêB B·∫Øc B·ªô', 'Duy√™n h·∫£i Nam TB', 'T√¢y Nguy√™n', 'B·∫Øc TB', 'Kh√°c']
            total = data.get('total_population', 100)
            values = self._distribute_values(total, len(labels))
        elif 'tr·ª©ng' in question.lower() or 'egg' in question.lower():
            chart_type = 'doughnut'
            title = f"NƒÉng su·∫•t tr·ª©ng {subcategory}"
            labels = ['Xu·∫•t s·∫Øc (>90%)', 'T·ªët (70-90%)', 'Trung b√¨nh (<70%)']
            values = [45, 35, 20]
        else:
            chart_type = 'doughnut'
            title = f"C∆° c·∫•u {subcategory} theo m·ª•c ƒë√≠ch"
            labels = data.get('types', ['Th·ªãt', 'ƒê·∫ª', 'Gi·ªëng'])
            values = self._distribute_values(100, len(labels))
        
        return ChartData(
            chart_type=chart_type,
            title=title,
            subtitle=f"D·ªØ li·ªáu gia c·∫ßm {subcategory} nƒÉm 2024",
            labels=labels,
            datasets=[{
                'label': title,
                'data': values,
                'backgroundColor': self._generate_colors(len(labels)),
                'borderColor': '#ffffff',
                'borderWidth': 2
            }],
            metrics=self._generate_poultry_metrics(subcategory, data)
        )

    def _create_animal_husbandry_chart(self, subcategory: str, data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì cho chƒÉn nu√¥i t·ªïng h·ª£p"""
        chart_type = 'bar'
        title = "T·ªïng quan chƒÉn nu√¥i Vi·ªát Nam"
        labels = ['Gia s√∫c (4 ch√¢n)', 'Gia c·∫ßm (2 ch√¢n)', 'Th·ªßy s·∫£n', 'Kh√°c']
        values = [35, 55, 8, 2]  # T·ª∑ l·ªá ph·∫ßn trƒÉm
        
        return ChartData(
            chart_type=chart_type,
            title=title,
            subtitle="C∆° c·∫•u chƒÉn nu√¥i theo lo·∫°i ƒë·ªông v·∫≠t",
            labels=labels,
            datasets=[{
                'label': 'T·ª∑ tr·ªçng (%)',
                'data': values,
                'backgroundColor': ['#8b5cf6', '#10b981', '#3b82f6', '#f59e0b']
            }],
            metrics=[
                {'label': 'T·ªïng ƒë√†n gia s√∫c', 'value': '36M con', 'change': '+2.1%', 'trend': 'positive'},
                {'label': 'T·ªïng ƒë√†n gia c·∫ßm', 'value': '477M con', 'change': '+3.5%', 'trend': 'positive'},
                {'label': 'T·ªïng gi√° tr·ªã ng√†nh', 'value': '267 ngh√¨n t·ª∑ VNƒê', 'change': '+4.2%', 'trend': 'positive'}
            ]
        )

    def _generate_poultry_metrics(self, subcategory: str, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """T·∫°o metrics cho gia c·∫ßm"""
        metrics = [
            {
                'label': f'T·ªïng ƒë√†n {subcategory}',
                'value': f"{data.get('total_population', 100)}M con",
                'change': '+3.2%',
                'trend': 'positive'
            },
            {
                'label': f'Gi√° {subcategory} hi·ªán t·∫°i',
                'value': f"{data.get('current_price', 45000):,} VNƒê/kg",
                'change': '+1.8%',
                'trend': 'positive'
            },
            {
                'label': 'TƒÉng tr·ªçng TB',
                'value': f"{data.get('growth_rate', 40)}g/ng√†y",
                'change': '+2.5%',
                'trend': 'positive'
            }
        ]
        
        # Th√™m metric v·ªÅ tr·ª©ng n·∫øu c√≥
        if 'eggs_per_year' in data:
            metrics.append({
                'label': 'NƒÉng su·∫•t tr·ª©ng',
                'value': f"{data['eggs_per_year']} qu·∫£/nƒÉm",
                'change': '+1.2%',
                'trend': 'positive'
            })
        
        return metrics
    
    # Data loading methods
    def _load_livestock_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu gia s√∫c (ƒë·ªông v·∫≠t 4 ch√¢n)"""
        return {
            'heo': {
                'total_population': 26.8,  # tri·ªáu con
                'current_price': 73500,    # VNƒê/kg s·ªëng
                'growth_rate': 750,        # gram/ng√†y
                'types': ['Heo n√°i', 'Heo th·ªãt', 'Heo con'],
                'category': 'livestock',
                'legs': 4,
                'description': 'ƒê·ªông v·∫≠t gia s√∫c 4 ch√¢n, ngu·ªìn protein ch√≠nh'
            },
            'b√≤': {
                'total_population': 5.2,
                'current_price': 92000,
                'growth_rate': 1000,
                'types': ['B√≤ th·ªãt', 'B√≤ s·ªØa', 'B√≤ gi·ªëng'],
                'category': 'livestock',
                'legs': 4,
                'description': 'ƒê·ªông v·∫≠t gia s√∫c l·ªõn, ngu·ªìn th·ªãt v√† s·ªØa'
            },
            'tr√¢u': {
                'total_population': 2.8,
                'current_price': 85000,
                'growth_rate': 900,
                'types': ['Tr√¢u th·ªãt', 'Tr√¢u c√†y', 'Tr√¢u s·ªØa'],
                'category': 'livestock',
                'legs': 4,
                'description': 'ƒê·ªông v·∫≠t gia s√∫c b·∫£n ƒë·ªãa, ch·ªãu kh√¥ h·∫°n t·ªët'
            },
            'd√™': {
                'total_population': 1.5,
                'current_price': 78000,
                'growth_rate': 300,
                'types': ['D√™ th·ªãt', 'D√™ s·ªØa', 'D√™ gi·ªëng'],
                'category': 'livestock',
                'legs': 4,
                'description': 'ƒê·ªông v·∫≠t gia s√∫c nh·ªè, th√≠ch nghi t·ªët v·ªõi kh√≠ h·∫≠u kh√¥'
            },
            'c·ª´u': {
                'total_population': 0.8,
                'current_price': 82000,
                'growth_rate': 280,
                'types': ['C·ª´u th·ªãt', 'C·ª´u len', 'C·ª´u gi·ªëng'],
                'category': 'livestock',
                'legs': 4,
                'description': 'ƒê·ªông v·∫≠t gia s√∫c nh·ªè, ngu·ªìn th·ªãt v√† len'
            },
            'default': {
                'total_population': 10,
                'current_price': 75000,
                'growth_rate': 600,
                'types': ['Lo·∫°i 1', 'Lo·∫°i 2', 'Lo·∫°i 3'],
                'category': 'livestock',
                'legs': 4,
                'description': 'Gia s√∫c t·ªïng qu√°t'
            }
        }
    
    def _load_crops_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu c√¢y tr·ªìng"""
        return {
            'l√∫a': {
                'area': 7.42,  # tri·ªáu ha
                'yield': 5.89,  # t·∫•n/ha
                'price': 7200,  # VNƒê/kg
                'production': 43.67  # tri·ªáu t·∫•n
            },
            'ng√¥': {
                'area': 1.18,
                'yield': 4.72,
                'price': 5800,
                'production': 5.57
            },
            'c√† ph√™': {
                'area': 0.7,
                'yield': 2.5,
                'price': 45000,
                'production': 1.75
            },
            'default': {
                'area': 1.0,
                'yield': 3.0,
                'price': 10000,
                'production': 3.0
            }
        }
    
    def _load_economics_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu kinh t·∫ø"""
        return {
            'export': {
                'total_value': 53.2,  # t·ª∑ USD
                'growth_rate': 8.5,   # %
                'main_products': ['G·∫°o', 'C√† ph√™', 'Cao su', 'Ti√™u']
            },
            'import': {
                'total_value': 12.8,
                'growth_rate': 5.2,
                'main_products': ['Ph√¢n b√≥n', 'M√°y m√≥c', 'Thu·ªëc BVTV']
            }
        }
    
    def _load_weather_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu th·ªùi ti·∫øt"""
        return {
            'temperature': {
                'average': 26.5,
                'min': 18.2,
                'max': 35.8,
                'monthly_data': [22, 24, 26, 28, 29, 30, 29, 28, 27, 25, 23, 21]
            },
            'rainfall': {
                'annual': 1800,
                'monthly_data': [45, 60, 80, 120, 180, 250, 280, 260, 200, 120, 80, 50]
            }
        }
    
    def _load_fertilizer_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu ph√¢n b√≥n"""
        return {
            'urea': {
                'price': 13200,
                'consumption': 2.5,  # tri·ªáu t·∫•n
                'nitrogen_content': 46
            },
            'npk': {
                'price': 16500,
                'consumption': 1.8,
                'composition': [20, 20, 15]
            }
        }
    
    def _load_poultry_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu gia c·∫ßm (ƒë·ªông v·∫≠t 2 ch√¢n, c√≥ c√°nh)"""
        return {
            'g√†': {
                'total_population': 347,   # tri·ªáu con
                'current_price': 48000,    # VNƒê/kg s·ªëng
                'growth_rate': 45,         # gram/ng√†y
                'types': ['G√† th·ªãt', 'G√† ƒë·∫ª', 'G√† gi·ªëng'],
                'category': 'poultry',
                'legs': 2,
                'eggs_per_year': 280,
                'description': 'Gia c·∫ßm ph·ªï bi·∫øn nh·∫•t, ngu·ªìn th·ªãt v√† tr·ª©ng ch√≠nh'
            },
            'v·ªãt': {
                'total_population': 82,
                'current_price': 42000,
                'growth_rate': 38,
                'types': ['V·ªãt th·ªãt', 'V·ªãt ƒë·∫ª', 'V·ªãt gi·ªëng'],
                'category': 'poultry',
                'legs': 2,
                'eggs_per_year': 200,
                'description': 'Gia c·∫ßm n∆∞·ªõc, th√≠ch h·ª£p v·ªõi kh√≠ h·∫≠u ·∫©m ∆∞·ªõt'
            },
            'ngan': {
                'total_population': 15,
                'current_price': 55000,
                'growth_rate': 65,
                'types': ['Ngan th·ªãt', 'Ngan ƒë·∫ª', 'Ngan gi·ªëng'],
                'category': 'poultry',
                'legs': 2,
                'eggs_per_year': 180,
                'description': 'Gia c·∫ßm l·ªõn, th·ªãt th∆°m ngon'
            },
            'ng·ªóng': {
                'total_population': 8,
                'current_price': 72000,
                'growth_rate': 85,
                'types': ['Ng·ªóng th·ªãt', 'Ng·ªóng l√¥ng', 'Ng·ªóng gi·ªëng'],
                'category': 'poultry',
                'legs': 2,
                'eggs_per_year': 60,
                'description': 'Gia c·∫ßm l·ªõn nh·∫•t, ngu·ªìn th·ªãt v√† l√¥ng'
            },
            'chim_c√∫t': {
                'total_population': 25,
                'current_price': 35000,
                'growth_rate': 15,
                'types': ['C√∫t th·ªãt', 'C√∫t ƒë·∫ª', 'C√∫t gi·ªëng'],
                'category': 'poultry',
                'legs': 2,
                'eggs_per_year': 300,
                'description': 'Gia c·∫ßm nh·ªè, tr·ª©ng b·ªï d∆∞·ª°ng'
            },
            'default': {
                'total_population': 50,
                'current_price': 45000,
                'growth_rate': 40,
                'types': ['Lo·∫°i 1', 'Lo·∫°i 2', 'Lo·∫°i 3'],
                'category': 'poultry',
                'legs': 2,
                'eggs_per_year': 200,
                'description': 'Gia c·∫ßm t·ªïng qu√°t'
            }
        }
    
    def _load_irrigation_data(self) -> Dict[str, Any]:
        """Load d·ªØ li·ªáu t∆∞·ªõi ti√™u"""
        return {
            'systems': {
                'sprinkler': {'efficiency': 85, 'cost': 15000000, 'description': 'H·ªá th·ªëng t∆∞·ªõi phun'},
                'drip': {'efficiency': 95, 'cost': 25000000, 'description': 'H·ªá th·ªëng t∆∞·ªõi nh·ªè gi·ªçt'},
                'flood': {'efficiency': 60, 'cost': 5000000, 'description': 'T∆∞·ªõi tr√†n'},
                'furrow': {'efficiency': 70, 'cost': 8000000, 'description': 'T∆∞·ªõi r√£nh'}
            },
            'water_usage': {
                'rice': 1500,  # m3/ha
                'corn': 800,
                'vegetables': 600,
                'fruit_trees': 1200
            },
            'regions': {
                'north': {'water_availability': 'sufficient', 'main_source': 'rivers'},
                'central': {'water_availability': 'moderate', 'main_source': 'reservoirs'},
                'south': {'water_availability': 'abundant', 'main_source': 'mekong_delta'}
            }
        }
    
    def _load_analysis_patterns(self) -> Dict[str, Any]:
        """Load patterns ƒë·ªÉ ph√¢n t√≠ch c√¢u h·ªèi"""
        return {
            'livestock': {  # GIA S√öC - ƒê·ªông v·∫≠t 4 ch√¢n
                'keywords': ['heo', 'l·ª£n', 'b√≤', 'tr√¢u', 'd√™', 'c·ª´u', 'gia s√∫c', 'th·ªãt heo', 'th·ªãt b√≤', 's·ªØa b√≤', 's·ªØa d√™'],
                'weights': {
                    'heo': 3, 'l·ª£n': 3, 'b√≤': 3, 'tr√¢u': 3, 'd√™': 3, 'c·ª´u': 3,
                    'gia s√∫c': 2, 'th·ªãt heo': 2, 'th·ªãt b√≤': 2, 's·ªØa': 2
                },
                'subcategories': {
                    'heo': ['heo', 'l·ª£n', 'heo h∆°i', 'heo th·ªãt', 'heo n√°i', 'heo con'],
                    'b√≤': ['b√≤', 'b√≤ th·ªãt', 'b√≤ s·ªØa', 'b√™', 'ngh√©'],
                    'tr√¢u': ['tr√¢u', 'tr√¢u th·ªãt', 'tr√¢u c√†y'],
                    'd√™': ['d√™', 'd√™ th·ªãt', 's·ªØa d√™', 'd√™ con'],
                    'c·ª´u': ['c·ª´u', 'c·ª´u th·ªãt', 'len c·ª´u', 'c·ª´u con']
                }
            },
            'poultry': {  # GIA C·∫¶M - ƒê·ªông v·∫≠t 2 ch√¢n, c√≥ c√°nh
                'keywords': ['g√†', 'v·ªãt', 'ngan', 'ng·ªóng', 'chim c√∫t', 'gia c·∫ßm', 'th·ªãt g√†', 'th·ªãt v·ªãt', 'tr·ª©ng g√†', 'tr·ª©ng v·ªãt'],
                'weights': {
                    'g√†': 3, 'v·ªãt': 3, 'ngan': 3, 'ng·ªóng': 3, 'chim c√∫t': 3,
                    'gia c·∫ßm': 2, 'tr·ª©ng': 2, 'th·ªãt g√†': 2, 'th·ªãt v·ªãt': 2
                },
                'subcategories': {
                    'g√†': ['g√†', 'g√† th·ªãt', 'g√† ta', 'g√† c√¥ng nghi·ªáp', 'g√† broiler', 'g√† layer', 'tr·ª©ng g√†'],
                    'v·ªãt': ['v·ªãt', 'v·ªãt th·ªãt', 'v·ªãt con', 'v·ªãt si√™u th·ªãt', 'tr·ª©ng v·ªãt'],
                    'ngan': ['ngan', 'th·ªãt ngan', 'tr·ª©ng ngan'],
                    'ng·ªóng': ['ng·ªóng', 'th·ªãt ng·ªóng', 'l√¥ng ng·ªóng'],
                    'chim_c√∫t': ['chim c√∫t', 'c√∫t', 'tr·ª©ng c√∫t']
                }
            },
            'animal_husbandry': {  # CHƒÇN NU√îI T·ªîNG H·ª¢P - Bao g·ªìm c·∫£ gia s√∫c v√† gia c·∫ßm
                'keywords': ['chƒÉn nu√¥i', 'trang tr·∫°i', 'ƒë√†n', 'nu√¥i', 'ƒë·ªông v·∫≠t', 'th·ª©c ƒÉn chƒÉn nu√¥i', 'chu·ªìng tr·∫°i', 'vaccine'],
                'weights': {
                    'chƒÉn nu√¥i': 3, 'trang tr·∫°i': 2, 'nu√¥i': 2, 'ƒë√†n': 2
                },
                'subcategories': {
                    'general': ['chƒÉn nu√¥i', 'nu√¥i', 'trang tr·∫°i'],
                    'feed': ['th·ª©c ƒÉn', 'c√°m', 'c·ªè', 'silage'],
                    'health': ['vaccine', 'thu·ªëc th√∫ y', 'b·ªánh', 'd·ªãch'],
                    'facility': ['chu·ªìng', 'tr·∫°i', 'h·ªá th·ªëng']
                }
            },
            'crops': {
                'keywords': ['l√∫a', 'g·∫°o', 'ng√¥', 'b·∫Øp', 'khoai', 'rau', 'c√† ph√™', 'cao su', 'ti√™u', 'ƒëi·ªÅu', 'c√¢y tr·ªìng', 'tr·ªìng tr·ªçt'],
                'weights': {
                    'l√∫a': 3, 'g·∫°o': 3, 'ng√¥': 3, 'b·∫Øp': 3, 'c√† ph√™': 3,
                    'cao su': 3, 'ti√™u': 3, 'c√¢y tr·ªìng': 2, 'tr·ªìng tr·ªçt': 2
                },
                'subcategories': {
                    'l√∫a': ['l√∫a', 'g·∫°o', 'th√≥c', 'ru·ªông l√∫a'],
                    'ng√¥': ['ng√¥', 'b·∫Øp', 'b·∫Øp ng√¥', 'ng√¥ ng·ªçt'],
                    'c√† ph√™': ['c√† ph√™', 'cafe', 'coffee', 'robusta', 'arabica'],
                    'cao su': ['cao su', 'rubber', 'm·ªß cao su'],
                    'ti√™u': ['ti√™u', 'pepper', 'ti√™u ƒëen'],
                    'rau': ['rau', 'rau xanh', 'rau c·ªß', 'c·∫£i', 'x√† l√°ch']
                }
            },
            'economics': {
                'keywords': ['gi√°', 'chi ph√≠', 'l·ª£i nhu·∫≠n', 'doanh thu', 'th·ªã tr∆∞·ªùng', 'xu·∫•t kh·∫©u', 'nh·∫≠p kh·∫©u', 'kinh t·∫ø'],
                'weights': {
                    'gi√°': 3, 'th·ªã tr∆∞·ªùng': 3, 'xu·∫•t kh·∫©u': 3, 'kinh t·∫ø': 2
                },
                'subcategories': {
                    'price': ['gi√°', 'gi√° c·∫£', 'cost', 'price'],
                    'export': ['xu·∫•t kh·∫©u', 'export', 'b√°n ra n∆∞·ªõc ngo√†i'],
                    'import': ['nh·∫≠p kh·∫©u', 'import', 'mua t·ª´ n∆∞·ªõc ngo√†i'],
                    'market': ['th·ªã tr∆∞·ªùng', 'market', 'kinh doanh']
                }
            }
        }
    
    def _create_crops_main_chart(self, subcategory: str, data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì ch√≠nh cho c√¢y tr·ªìng"""
        if 'di·ªán t√≠ch' in question.lower() or 'area' in question.lower():
            chart_type = 'bar'
            title = f"Di·ªán t√≠ch tr·ªìng {subcategory} theo v√πng"
            labels = ['ƒêBSCL', 'ƒêB B·∫Øc B·ªô', 'Duy√™n h·∫£i Nam TB', 'T√¢y Nguy√™n', 'B·∫Øc TB']
            total_area = data.get('area', 5.0)
            values = self._distribute_values(total_area, len(labels))
        elif 'nƒÉng su·∫•t' in question.lower() or 'yield' in question.lower():
            chart_type = 'line'
            title = f"NƒÉng su·∫•t {subcategory} theo th√°ng"
            labels = [f"T{i}" for i in range(1, 13)]
            base_yield = data.get('yield', 3.0)
            values = [base_yield + random.uniform(-0.5, 0.5) for _ in range(12)]
        else:
            chart_type = 'doughnut'
            title = f"C∆° c·∫•u s·∫£n xu·∫•t {subcategory}"
            labels = ['S·∫£n xu·∫•t th∆∞∆°ng ph·∫©m', 'Ti√™u d√πng n·ªôi ƒë·ªãa', 'Xu·∫•t kh·∫©u']
            values = self._distribute_values(100, len(labels))
        
        return ChartData(
            chart_type=chart_type,
            title=title,
            subtitle=f"D·ªØ li·ªáu {subcategory} nƒÉm 2024",
            labels=labels,
            datasets=[{
                'label': title,
                'data': values,
                'backgroundColor': self._generate_colors(len(labels)),
                'borderColor': '#ffffff',
                'borderWidth': 2
            }],
            metrics=self._generate_crops_metrics(subcategory, data)
        )
    
    def _generate_crops_metrics(self, subcategory: str, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """T·∫°o metrics cho c√¢y tr·ªìng"""
        metrics = [
            {
                'label': f'Di·ªán t√≠ch {subcategory}',
                'value': f"{data.get('area', 5.0)} tri·ªáu ha",
                'change': '+1.8%',
                'trend': 'positive'
            },
            {
                'label': f'NƒÉng su·∫•t {subcategory}',
                'value': f"{data.get('yield', 3.0)} t·∫•n/ha",
                'change': '+2.5%',
                'trend': 'positive'
            },
            {
                'label': f'Gi√° {subcategory}',
                'value': f"{data.get('price', 10000):,} VNƒê/kg",
                'change': '+3.2%',
                'trend': 'positive'
            }
        ]
        return metrics
    
    def _create_economics_main_chart(self, subcategory: str, data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì ch√≠nh cho kinh t·∫ø"""
        return ChartData(
            chart_type='line',
            title=f"Xu h∆∞·ªõng {subcategory} n√¥ng s·∫£n",
            subtitle="12 th√°ng qua",
            labels=[f"T{i}" for i in range(1, 13)],
            datasets=[{
                'label': f'{subcategory} (t·ª∑ USD)',
                'data': self._generate_trend_data(),
                'borderColor': '#10b981',
                'backgroundColor': 'rgba(16, 185, 129, 0.1)',
                'fill': True
            }],
            metrics=[
                {'label': 'T·ªïng gi√° tr·ªã', 'value': '53.2 t·ª∑ USD', 'change': '+8.5%', 'trend': 'positive'}
            ]
        )
    
    def _create_general_main_chart(self, analysis: Dict[str, Any], data: Dict[str, Any], question: str) -> ChartData:
        """T·∫°o bi·ªÉu ƒë·ªì t·ªïng qu√°t"""
        return ChartData(
            chart_type='bar',
            title="T·ªïng quan n√¥ng nghi·ªáp Vi·ªát Nam",
            subtitle="C√°c ch·ªâ s·ªë ch√≠nh theo ng√†nh",
            labels=['Gia s√∫c (4 ch√¢n)', 'Gia c·∫ßm (2 ch√¢n)', 'C√¢y tr·ªìng', 'Th·ªßy s·∫£n', 'L√¢m nghi·ªáp'],
            datasets=[{
                'label': 'T·ª∑ tr·ªçng GDP (%)',
                'data': [18, 25, 42, 12, 3],
                'backgroundColor': self._generate_colors(5)
            }],
            metrics=[
                {'label': 'T·ªïng GDP n√¥ng nghi·ªáp', 'value': '14.8%', 'change': '+1.2%', 'trend': 'positive'},
                {'label': 'Kim ng·∫°ch xu·∫•t kh·∫©u', 'value': '53.2 t·ª∑ USD', 'change': '+8.5%', 'trend': 'positive'},
                {'label': 'TƒÉng tr∆∞·ªüng ng√†nh', 'value': '3.2%/nƒÉm', 'change': '+0.5%', 'trend': 'positive'}
            ]
        )

# Utility functions ƒë·ªÉ s·ª≠ d·ª•ng t·ª´ JavaScript
def analyze_agricultural_question(question: str, gemini_api_key: str = None) -> str:
    """
    Function ch√≠nh ƒë·ªÉ g·ªçi t·ª´ JavaScript/Python backend
    Tr·∫£ v·ªÅ JSON string ch·ª©a c·∫•u h√¨nh bi·ªÉu ƒë·ªì
    """
    try:
        print(f"DEBUG: Starting analysis for: {question}")
        
        analyzer = AgriDataAnalyzer(gemini_api_key)
        print("DEBUG: AgriDataAnalyzer created")
        
        result = analyzer.analyze_question(question, use_ai=False)  # Disable AI for now to avoid errors
        print(f"DEBUG: Analysis complete: {result.category}")
        
        # Convert to JSON-serializable format
        output = {
            'success': True,
            'category': result.category,
            'subcategory': result.subcategory,
            'confidence': result.confidence,
            'keywords': result.keywords,
            'time_period': result.time_period,
            'charts': []
        }
        
        for chart in result.chart_configs:
            chart_dict = {
                'chart_type': chart.chart_type,
                'title': chart.title,
                'subtitle': chart.subtitle,
                'labels': chart.labels,
                'datasets': chart.datasets,
                'metrics': chart.metrics
            }
            if hasattr(chart, 'expert_data') and chart.expert_data:
                chart_dict['expert_data'] = chart.expert_data
            
            output['charts'].append(chart_dict)
        
        print(f"DEBUG: Generated {len(output['charts'])} charts")
        return json.dumps(output, ensure_ascii=False, indent=2)
        
    except Exception as e:
        print(f"DEBUG: Error in analyze_agricultural_question: {e}")
        import traceback
        traceback.print_exc()
        
        error_output = {
            'success': False,
            'error': str(e),
            'charts': []
        }
        return json.dumps(error_output, ensure_ascii=False)

# Test function
if __name__ == "__main__":
    # Test v·ªõi m·ªôt s·ªë c√¢u h·ªèi ph√¢n lo·∫°i ch√≠nh x√°c
    test_questions = [
        "T·ª∑ l·ªá gia s√∫c ·ªü Vi·ªát Nam ph√¢n b·ªë ra sao?",  # Gia s√∫c (4 ch√¢n)
        "Gi√° heo h∆°i hi·ªán t·∫°i nh∆∞ th·∫ø n√†o?",        # Gia s√∫c - heo
        "ƒê√†n b√≤ s·ªØa t·∫°i Vi·ªát Nam c√≥ bao nhi√™u?",    # Gia s√∫c - b√≤
        "S·ªë l∆∞·ª£ng g√† trong c·∫£ n∆∞·ªõc",                # Gia c·∫ßm - g√†
        "NƒÉng su·∫•t tr·ª©ng v·ªãt ·ªü ƒêBSCL",              # Gia c·∫ßm - v·ªãt
        "T·ªïng quan chƒÉn nu√¥i Vi·ªát Nam",             # ChƒÉn nu√¥i t·ªïng h·ª£p
        "S·∫£n l∆∞·ª£ng l√∫a nƒÉm nay tƒÉng hay gi·∫£m?",     # C√¢y tr·ªìng
        "Xu·∫•t kh·∫©u c√† ph√™ 6 th√°ng ƒë·∫ßu nƒÉm"          # Kinh t·∫ø
    ]
    
    analyzer = AgriDataAnalyzer()
    
    for question in test_questions:
        print(f"\nüîç Testing: {question}")
        result_json = analyze_agricultural_question(question)
        result = json.loads(result_json)
        print(f"‚úÖ Category: {result['category']}/{result['subcategory']}")
        print(f"üìä Charts generated: {len(result['charts'])}")
        if result['charts']:
            print(f"üìà First chart: {result['charts'][0]['title']}")
            # Hi·ªÉn th·ªã category c·ªßa data ƒë·ªÉ ki·ªÉm tra
            if 'category' in result['charts'][0].get('datasets', [{}])[0]:
                print(f"üè∑Ô∏è  Data category: {result['charts'][0]['datasets'][0]['category']}")
    
    # Test ri√™ng ph√¢n bi·ªát gia s√∫c vs gia c·∫ßm
    print("\n" + "="*50)
    print("üß™ KI·ªÇM TRA PH√ÇN LO·∫†I GIA S√öC VS GIA C·∫¶M")
    print("="*50)
    
    livestock_questions = ["heo", "b√≤", "d√™", "c·ª´u", "tr√¢u"]
    poultry_questions = ["g√†", "v·ªãt", "ngan", "ng·ªóng", "chim c√∫t"]
    
    print("\nüêÑ GIA S√öC (4 ch√¢n):")
    for animal in livestock_questions:
        question = f"Gi√° {animal} hi·ªán t·∫°i"
        result_json = analyze_agricultural_question(question)
        result = json.loads(result_json)
        print(f"  {animal}: {result['category']}")
    
    print("\nüêî GIA C·∫¶M (2 ch√¢n):")
    for animal in poultry_questions:
        question = f"Gi√° {animal} hi·ªán t·∫°i"
        result_json = analyze_agricultural_question(question)
        result = json.loads(result_json)
        print(f"  {animal}: {result['category']}")
